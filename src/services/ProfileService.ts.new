import type { Profile, PaginatedOrders, AddressInput, PaymentMethodInput, UpdateProfileData } from '@/types/models';

const API_VERSION = '/api';

export const isAuthenticated = () => {
  return !!localStorage.getItem('token');
};

export const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('Authentication required');
  }
  return {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  };
};

// Helper function to handle API responses
const handleResponse = async <T>(response: Response): Promise<T> => {
  const contentType = response.headers.get('content-type');
  
  if (response.status === 401) {
    // Clear invalid token and user data
    localStorage.removeItem('token');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
    // Notify about unauthorized access
    window.dispatchEvent(new CustomEvent('auth:required'));
    throw new Error('Authentication required');
  }

  if (!response.ok) {
    if (contentType?.includes('application/json')) {
      const error = await response.json();
      throw new Error(error.message || error.error?.message || `Request failed with status ${response.status}`);
    }
    throw new Error(`Request failed with status ${response.status}`);
  }

  if (!contentType?.includes('application/json')) {
    throw new Error('Invalid response format from server');
  }

  return response.json();
};

export const profileService = {
  async getProfile(): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/profile`, {
        method: 'GET',
        headers: getAuthHeaders(),
        credentials: 'include'
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to fetch profile:', error);
      throw error;
    }
  },

  async updateProfile(data: UpdateProfileData): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/profile`, {
        method: 'PATCH',
        headers: getAuthHeaders(),
        credentials: 'include',
        body: JSON.stringify(data)
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to update profile:', error);
      throw error;
    }
  },

  async addAddress(address: AddressInput): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/addresses`, {
        method: 'POST',
        headers: getAuthHeaders(),
        credentials: 'include',
        body: JSON.stringify(address)
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to add address:', error);
      throw error;
    }
  },

  async updateAddress(id: string, address: AddressInput): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/addresses/${id}`, {
        method: 'PATCH',
        headers: getAuthHeaders(),
        credentials: 'include',
        body: JSON.stringify(address)
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to update address:', error);
      throw error;
    }
  },

  async deleteAddress(id: string): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/addresses/${id}`, {
        method: 'DELETE',
        headers: getAuthHeaders(),
        credentials: 'include'
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to delete address:', error);
      throw error;
    }
  },

  async addPaymentMethod(paymentMethod: PaymentMethodInput): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/payment-methods`, {
        method: 'POST',
        headers: getAuthHeaders(),
        credentials: 'include',
        body: JSON.stringify(paymentMethod)
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to add payment method:', error);
      throw error;
    }
  },

  async deletePaymentMethod(id: string): Promise<Profile> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/user/payment-methods/${id}`, {
        method: 'DELETE',
        headers: getAuthHeaders(),
        credentials: 'include'
      });
      return handleResponse<Profile>(response);
    } catch (error) {
      console.error('Failed to delete payment method:', error);
      throw error;
    }
  },

  async getOrders(page: number = 1, pageSize: number = 10): Promise<PaginatedOrders> {
    if (!isAuthenticated()) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${API_VERSION}/orders?page=${page}&pageSize=${pageSize}`, {
        method: 'GET',
        headers: getAuthHeaders(),
        credentials: 'include'
      });
      return handleResponse<PaginatedOrders>(response);
    } catch (error) {
      console.error('Failed to fetch orders:', error);
      throw error;
    }
  }
};
